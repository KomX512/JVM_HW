/*В начале ClassLoaders подгружают классы: Bootstrap подгружает классы из стандартных библиотек,
    потом Platform подгружает классы из подключённых зависимостей и
    Application грузит самописные классы, если ClassLoaders не может найти класс
    выбрасывает java.lang.ClassNotFoundException
    Информация про классы подгружается в Metaspace.
*/
public class JvmComprehension {

    public static void main(String[] args) {//Создаётся фрейм main в Stack
        int i = 1;                      // 1. В фрейме main создаётся int i = 1.
        Object o = new Object();        // 2. В Heap выделяется память под объект класса Object.
                                        // Создается ссылка o на созданный объект в Heap(Куче) помещается в Stack в том же фрейме

        Integer ii = 2;                 // 3. В Integer - ссылочный тип, потому Heap выделяется память под объект класса
                                        // Integer который присваивается значением 2.
                                        //  Ссылка ii на созданный объект в Heap помещается в Stack (фрейм всё тот же main)
        printAll(o, i, ii);             // 4. В Stack создаётся новый фрейм для метода printAll(). В этот фрейм помещаются:
                                        //ссылка o (Object),
                                        //переменная i,
                                        //ссылка ii

        System.out.println("finished"); // 7. Создаётся фрейм println в Stack туда напрямую передаём значение "finished"
        //после исполнения println он тоже стирается из stack.
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5. Создаём переменную uselessVar в которой лежит ссылка
                                                    // на память в куче размером с Integer, присваивается знаение 700.
        System.out.println(o.toString() + i + ii);  // 6. Для каждого из полей o, i и ii вызывается метод toString().
                                                    // Для каждого такого вызова создается отдельный фрейм в Stack,
                                                    //который удаляется из Stack после выполнения этих методов.
                                                    // В Heap выделяется память под новый объект класса String в который заносится результат сложения строк.
                                                    // В Stack создаётся новый фрейм для метода println().
                                                    // Ссылка на созданный объект помещается во фрейм println.
                                                    // После выполнения метода println() фрейм println удаляется из Stack.
                                                    // Новый объект типа String может быть удалён из Heap при следующем запуске Garbage Collector,
                                                    // т.к. отсутствует ссылка на данный объект.
    }
    //метод printAll выполняется и исчезает. Удялется ссылка на uselessVar и в куче остается значение без ссылок, ждёт запуска GC
}